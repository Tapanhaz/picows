name: example

on:
  push:
    branches: [ "master" ]

jobs:

  build-sdist:
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install build
      run: |
        python -m pip install --upgrade pip
        pip install build cibuildwheel

    - name: Create source dist
      run: python -m build -s

    - name: Publish source dist to github
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/*.tar.*

  build-wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        cibw_python: [ "cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp312-*" ]
        cibw_arch: [ "x86_64", "aarch64", "universal2" ]
        exclude:
          - os: ubuntu-latest
            cibw_arch: universal2
          - os: macos-latest
            cibw_arch: aarch64

    defaults:
      run:
        shell: bash

    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 50
          submodules: true

      - name: Set up QEMU
        if: matrix.os == 'ubuntu-latest' && matrix.cibw_arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Install macOS deps
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install gnu-sed libtool autoconf automake

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.20.0

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_ARCHS: ${{ matrix.cibw_arch }}
          CIBW_TEST_SKIP: "*universal2:arm64"

      - uses: actions/upload-artifact@v4
        with:
          name: dist
          path: wheelhouse/*.whl

#  publish:
#    needs: [build-sdist, build-wheels]
#    runs-on: ubuntu-latest
#
#    steps:
#    - uses: actions/checkout@v4  # v4.1.0
#      with:
#        fetch-depth: 5
#        submodules: false
#
#    - uses: actions/download-artifact@v4  # v3.0.2
#      with:
#        name: dist
#        path: dist/
#
#    - name: Extract Release Version
#      id: relver
#      run: |
#        set -e
#        echo version=$(cat dist/VERSION) >> $GITHUB_OUTPUT
#        rm dist/VERSION
#
#    - name: Publish Github Release
#      uses: elprans/gh-action-create-release@master
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        tag_name: v${{ steps.relver.outputs.version }}
#        release_name: v${{ steps.relver.outputs.version }}
#        target: ${{ github.event.pull_request.base.ref }}
#        body: ${{ github.event.pull_request.body }}
#        draft: false
#
#    - run: |
#        ls -al dist/
#
#    - name: Upload to PyPI
#      uses: pypa/gh-action-pypi-publish@release/v1
#      with:
#        # user: __token__
#        # password: ${{ secrets.PYPI_TOKEN }}
#        # password: ${{ secrets.TEST_PYPI_TOKEN }}
#        repository_url: https://test.pypi.org/legacy/